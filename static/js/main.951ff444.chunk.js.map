{"version":3,"sources":["view/components/info/TargetTemperatureView.jsx","view/components/info/CurrentTemperatureView.jsx","view/components/info/ModeView.jsx","view/components/controls/RadialSliderView.jsx","model/thermostat.js","view/components/controls/CurrentTempControlView.jsx","view/MainViewPanel.jsx","App.js","serviceWorker.js","index.js"],"names":["TargetTemperatureView","props","state","targetTemperature","targetTemp","TargetedTemperature","x","SVG_WIDTH","y","SVG_HEIGHT","className","textAnchor","alignmentBaseline","fill","Math","round","this","renderTargetedTemperature","nextProps","prevState","Number","Component","CurrentTemperatureView","currentTemperature","currentTemp","CurrentTemperature","dy","renderCurrentTemperature","ModeView","modeColor","xmlns","viewBox","width","height","CENTER_X","CENTER_Y","d","renderSun","color","WHEEL_SCROLL_VALUE","RadialSliderView","handleMouseDown","event","preventDefault","window","addEventListener","handleMouseMove","handleMouseUp","setState","isMouseDown","isMouseMove","node","document","getElementById","getBoundingClientRect","CircleCenterX","left","right","CircleCenterY","top","bottom","degree","atan2","pageY","pageX","PI","setTransform","removeEventListener","handleWheel","tempDegree","deltaY","transform","alert","computeTargetTemperature","updateMode","prevProps","temperature","console","log","currentModeColor","getModeColor","x1","y1","x2","y2","strokeLinecap","stroke","strokeWidth","id","onMouseDown","onMouseUp","cx","cy","r","RADIUS","CIRCLE_STROKE_WIDTH","onWheel","offset","stopColor","stopOpacity","mask","renderBackground","renderSliderArea","renderSliderPrompt","renderSlider","CurrentTempControl","newPos","sliderXPos","updateTemp","offsetX","handleChange","newCurrentTemp","target","value","temporaryCurrentTemperature","updateCurrentTemp","style","display","flexDirection","justifyContent","alignItems","renderSliderLine","renderSliderButton","renderControls","newTemp","type","onChange","onClick","MainViewPanel","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.951ff444.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst SVG_WIDTH = 400;\r\nconst SVG_HEIGHT = 400;\r\nconst CENTER_X = SVG_WIDTH / 2;\r\nconst CENTER_Y = SVG_HEIGHT / 2;\r\n\r\nclass TargetTemperatureView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      targetTemperature: this.props.targetTemp\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return {\r\n      targetTemperature: Number(nextProps.targetTemp)\r\n    };\r\n  }\r\n\r\n  // https://stackoverflow.com/questions/28128491/svg-center-text-in-circle\r\n  renderTargetedTemperature(TargetedTemperature) {\r\n    let fontCenterX = CENTER_X;\r\n    let fontCenterY = CENTER_Y;\r\n\r\n    return (\r\n      <text\r\n        x={fontCenterX}\r\n        y={fontCenterY}\r\n        className=\"TargetedTemperature\"\r\n        textAnchor=\"middle\"\r\n        alignmentBaseline=\"middle\"\r\n        fill=\"#fafafa\"\r\n      >\r\n        {Math.round(TargetedTemperature)}\r\n        {/* &deg;F */}\r\n      </text>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <svg>{this.renderTargetedTemperature(this.state.targetTemperature)};</svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TargetTemperatureView;\r\n","import React, { Component } from \"react\";\r\n\r\nconst SVG_WIDTH = 400;\r\nconst SVG_HEIGHT = 400;\r\nconst CENTER_X = SVG_WIDTH / 2;\r\nconst CENTER_Y = SVG_HEIGHT / 2;\r\nclass CurrentTemperatureView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentTemperature: this.props.currentTemp\r\n    };\r\n  }\r\n\r\n  // https://alligator.io/react/get-derived-state/\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return {\r\n      currentTemperature: Number(nextProps.currentTemp)\r\n    };  \r\n  }\r\n\r\n  renderCurrentTemperature(CurrentTemperature) {\r\n    let fontCenterX = CENTER_X;\r\n    let fontCenterY = CENTER_Y;\r\n\r\n    return (\r\n      <text\r\n        x={fontCenterX}\r\n        y={fontCenterY}\r\n        dy=\"60\"\r\n        className=\"CurrentTemperature\"\r\n        textAnchor=\"middle\"\r\n        alignmentBaseline=\"middle\"\r\n        fill=\"#fafafa\"\r\n      >\r\n        Current: {Math.round(CurrentTemperature)}\r\n        {/* &deg;F */}\r\n      </text>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <svg>{this.renderCurrentTemperature(this.state.currentTemperature)}</svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentTemperatureView;\r\n","import React, { Component } from \"react\";\r\n\r\nconst SVG_WIDTH = 400;\r\nconst SVG_HEIGHT = 400;\r\nconst CENTER_X = SVG_WIDTH / 2;\r\nconst CENTER_Y = SVG_HEIGHT / 2;\r\n\r\nclass ModeView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      modeColor: \"#D6D6D6\"\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return {\r\n      modeColor: nextProps.color\r\n    };\r\n  }\r\n\r\n  // https://icons8.com/icons/set/sun\r\n  renderSun() {\r\n    const logowidth = 30;\r\n    const logoheight = 30;\r\n\r\n    return (\r\n      <svg\r\n        fill={this.state.modeColor}\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 24 24\"\r\n        width={logowidth}\r\n        height={logoheight}\r\n        x={CENTER_X - logowidth / 2}\r\n        y={CENTER_Y - logoheight / 2 + 95}\r\n      >\r\n        <path d=\"M 11 0 L 11 3 L 13 3 L 13 0 L 11 0 z M 4.2226562 2.8085938 L 2.8085938 4.2226562 L 4.9296875 6.34375 L 6.34375 4.9296875 L 4.2226562 2.8085938 z M 19.777344 2.8085938 L 17.65625 4.9296875 L 19.070312 6.34375 L 21.191406 4.2226562 L 19.777344 2.8085938 z M 12 5 C 8.1458514 5 5 8.1458514 5 12 C 5 15.854149 8.1458514 19 12 19 C 15.854149 19 19 15.854149 19 12 C 19 8.1458514 15.854149 5 12 5 z M 12 7 C 14.773268 7 17 9.2267316 17 12 C 17 14.773268 14.773268 17 12 17 C 9.2267316 17 7 14.773268 7 12 C 7 9.2267316 9.2267316 7 12 7 z M 0 11 L 0 13 L 3 13 L 3 11 L 0 11 z M 21 11 L 21 13 L 24 13 L 24 11 L 21 11 z M 4.9296875 17.65625 L 2.8085938 19.777344 L 4.2226562 21.191406 L 6.34375 19.070312 L 4.9296875 17.65625 z M 19.070312 17.65625 L 17.65625 19.070312 L 19.777344 21.191406 L 21.191406 19.777344 L 19.070312 17.65625 z M 11 21 L 11 24 L 13 24 L 13 21 L 11 21 z\" />\r\n      </svg>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <svg>{this.renderSun()};</svg>;\r\n  }\r\n}\r\n\r\nexport default ModeView;\r\n","import React, { Component } from \"react\";\r\nimport TargetTemperatureView from \"../info/TargetTemperatureView\";\r\nimport CurrentTemperatureView from \"../info/CurrentTemperatureView\";\r\nimport ModeView from \"../info/ModeView\";\r\nimport {getModeColor} from \"../../../model/thermostat.js\"\r\n\r\nimport \"./controls.css\";\r\n\r\nconst SVG_WIDTH = 400;\r\nconst SVG_HEIGHT = 400;\r\nconst CENTER_X = SVG_WIDTH / 2;\r\nconst CENTER_Y = SVG_HEIGHT / 2;\r\nconst RADIUS = SVG_WIDTH / 2 - 20;\r\nconst CIRCLE_STROKE_WIDTH = 10;\r\nconst WHEEL_SCROLL_VALUE = Math.round(280 / 30);\r\n\r\nclass RadialSliderView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      degree: 64,\r\n      transform: \"rotate(64,200,200)\",\r\n      isMouseDown: false,\r\n      isMouseMove: false,\r\n      targetTemperature: 72,\r\n      currentTemperature: 72,\r\n      modeColor: \"#D6D6D6\"\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return {\r\n      currentTemperature: Number(nextProps.currentTemp)\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps){\r\n    if ( prevProps.currentTemp !== this.props.currentTemp ) {\r\n      this.updateMode();\r\n    }\r\n  }\r\n\r\n  handleMouseDown = event => {\r\n    event.preventDefault();\r\n    window.addEventListener(\"mousemove\", this.handleMouseMove);\r\n    window.addEventListener(\"mouseup\", this.handleMouseUp);\r\n    this.setState({\r\n      isMouseDown: true\r\n    });\r\n  };\r\n\r\n  handleMouseMove = event => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      isMouseMove: true\r\n    });\r\n\r\n    const node = document.getElementById(\"SliderArea\").getBoundingClientRect();\r\n    const CircleCenterX = (node.left + node.right) / 2;\r\n    const CircleCenterY = (node.top + node.bottom) / 2;\r\n\r\n    // https://blog.plover.com/prog/atan2.html\r\n    let radian = Math.atan2(\r\n      event.pageY - CircleCenterY,\r\n      event.pageX - CircleCenterX\r\n    );\r\n\r\n    // 90 degree offset\r\n    let degree = 90 + (radian * 180) / Math.PI;\r\n\r\n    this.setState({\r\n      degree: degree\r\n    });\r\n    this.setTransform(degree); \r\n  };\r\n\r\n  handleMouseUp = event => {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      isMouseMove: false,\r\n      isMouseDown: false\r\n    });\r\n    window.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n    window.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n  };\r\n\r\n  handleWheel = event => {\r\n    // event.preventDefault();\r\n\r\n    var tempDegree = this.state.degree;\r\n    if (event.deltaY < 0) {\r\n      tempDegree = tempDegree + WHEEL_SCROLL_VALUE;\r\n\r\n      //   Guard to prevent reaching unexpected range\r\n      if (tempDegree > 220) {\r\n        // Transform 270 to -90 on scrolling up\r\n        if (tempDegree >= 270) {\r\n          tempDegree = -90;\r\n        }\r\n      } else if (tempDegree > 140 && tempDegree < 180) {\r\n        // If scrolling up into range, reset to 140\r\n        tempDegree = 140;\r\n      }\r\n    } else if (event.deltaY > 0) {\r\n      tempDegree = tempDegree - WHEEL_SCROLL_VALUE;\r\n\r\n      //   Transform -90 to 270 on scrolling down\r\n      if (tempDegree < -90) {\r\n        tempDegree = 270;\r\n      }\r\n      // If scrolling down into range, reset to 220\r\n      if (tempDegree > 180 && tempDegree <= 220) {\r\n        tempDegree = 220;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      degree: tempDegree\r\n    });\r\n    this.setTransform(tempDegree);\r\n  };\r\n\r\n  setTransform = degree => {\r\n    if (degree > 0 && degree < 140) {\r\n      this.setState({\r\n        transform: \"rotate(\" + degree + \",200,200)\"\r\n      });\r\n    } else if (degree <= 0 && degree >= -90) {\r\n      this.setState({\r\n        transform: \"rotate(\" + degree + \",200,200)\"\r\n      });\r\n    } else if (degree >= 220 && degree <= 270) {\r\n      this.setState({\r\n        transform: \"rotate(\" + degree + \",200,200)\"\r\n      });\r\n    }\r\n    // OUT OF RANGE HANDLING\r\n    else if (degree >= 180 && degree < 220) {\r\n      window.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n      this.setState({\r\n        transform: \"rotate(\" + 222 + \",200,200)\",\r\n        degree: 220\r\n      });\r\n\r\n      window.alert(\"Target temperature must be >=50 AND <=80\");\r\n    } else if (degree > 140 && degree <= 180) {\r\n      window.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n      this.setState({\r\n        transform: \"rotate(\" + 138 + \",200,200)\",\r\n        degree: 140\r\n      });\r\n      window.alert(\"Target temperature must be >=50 AND <=80\");\r\n    }\r\n    this.computeTargetTemperature();\r\n    this.updateMode();\r\n  };\r\n\r\n  computeTargetTemperature() {\r\n    let degree = this.state.degree;\r\n\r\n    degree = Math.round(degree);\r\n\r\n    // Transform the above mapping into some continuum: the range is now from -140 to 140\r\n    degree = degree + 141; // now the range = 1 to 281\r\n    if (degree > 220) {\r\n      degree = degree - 360;\r\n    }\r\n\r\n    if (degree < 0) {\r\n      degree = degree + 360;\r\n    }\r\n\r\n    // temp = 50 to 80\r\n    let degreePerUnitTemp = 30 / 280;\r\n\r\n    let temperature = degreePerUnitTemp * degree + 50;\r\n    temperature = Math.round(temperature);\r\n    this.setState({\r\n      targetTemperature: temperature\r\n    });\r\n    this.updateMode();\r\n  }\r\n\r\n  updateMode(){\r\n    console.log(\"updateMode\");\r\n    let tgtTemp = Number(this.state.targetTemperature);\r\n    let curTemp = Number(this.state.currentTemperature)\r\n    let curModeColor = this.state.modeColor;\r\n    let modeColor = getModeColor(tgtTemp, curTemp, curModeColor);\r\n    console.log(modeColor);\r\n    this.setState({\r\n      modeColor: modeColor\r\n    })\r\n\r\n  }\r\n\r\n  // Render Methods\r\n  renderSlider() {\r\n    return (\r\n      <svg>\r\n        <line\r\n          x1=\"200\"\r\n          y1=\"30\"\r\n          x2=\"200\"\r\n          y2=\"70\"\r\n          strokeLinecap=\"round\"\r\n          stroke=\"#f0f0f0\"\r\n          strokeWidth=\"14\"\r\n          transform={this.state.transform}\r\n        ></line>\r\n        <line\r\n          id=\"SliderButton\"\r\n          x1=\"200\"\r\n          y1=\"32\"\r\n          x2=\"200\"\r\n          y2=\"68\"\r\n          strokeLinecap=\"round\"\r\n          stroke=\"#ffb732\"\r\n          strokeWidth=\"10\"\r\n          fill=\"orange\"\r\n          transform={this.state.transform}\r\n          onMouseDown={this.handleMouseDown}\r\n          onMouseUp={this.handleMouseUp}\r\n        ></line>\r\n      </svg>\r\n    );\r\n  }\r\n  renderSliderArea() {\r\n    return (\r\n      <circle\r\n        id=\"SliderArea\"\r\n        cx={CENTER_X}\r\n        cy={CENTER_Y}\r\n        r={RADIUS - 20}\r\n        strokeWidth={CIRCLE_STROKE_WIDTH * 3}\r\n        stroke=\"#D6D6D6\"\r\n        fill=\"none\"\r\n        onWheel={this.handleWheel}\r\n      ></circle>\r\n    );\r\n  }\r\n\r\n  renderSliderPrompt() {\r\n    return (\r\n      <svg>\r\n        <defs>\r\n          <linearGradient id=\"HotColdGradient\">\r\n            <stop offset=\"0%\" stopColor=\"#3495E4\" />\r\n            <stop offset=\"100%\" stopColor=\"#E4656E\" />\r\n          </linearGradient>\r\n          <linearGradient id=\"MaskGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n            <stop offset=\"0%\" stopColor=\"white\" />\r\n            <stop offset=\"89%\" stopColor=\"white\" />\r\n            <stop offset=\"90%\" stopColor=\"black\" />\r\n            <stop offset=\"100%\" stopColor=\"black\" />\r\n          </linearGradient>\r\n          <linearGradient id=\"BlackOnly\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n            <stop offset=\"0%\" stopColor=\"white\" stopOpacity=\"0\" />\r\n            <stop offset=\"88%\" stopColor=\"white\" stopOpacity=\"0\" />\r\n            <stop offset=\"88%\" stopColor=\"#586369\" />\r\n            <stop offset=\"100%\" stopColor=\"#586369\" />\r\n          </linearGradient>\r\n        </defs>\r\n        <mask id=\"MaskPrompt\">\r\n          <circle\r\n            cx={CENTER_X}\r\n            cy={CENTER_Y}\r\n            r={RADIUS}\r\n            stroke=\"url('#MaskGradient')\"\r\n            strokeWidth={CIRCLE_STROKE_WIDTH}\r\n          ></circle>\r\n        </mask>\r\n        {/* GRADIENT PORTION TO INDICATE TEMPERATURE SELECTION */}\r\n        <circle\r\n          cx={CENTER_X}\r\n          cy={CENTER_Y}\r\n          r={RADIUS}\r\n          stroke=\"url('#HotColdGradient')\"\r\n          strokeWidth={CIRCLE_STROKE_WIDTH}\r\n          fill=\"none\"\r\n          mask=\"url(#MaskPrompt)\"\r\n        />\r\n        {/* BLACK PORTION TO INDICATE NO SELECTION ZONE */}\r\n        <circle\r\n          cx={CENTER_X}\r\n          cy={CENTER_Y}\r\n          r={RADIUS}\r\n          stroke=\"url('#BlackOnly')\"\r\n          strokeWidth={CIRCLE_STROKE_WIDTH}\r\n          fill=\"none\"\r\n        />\r\n      </svg>\r\n    );\r\n  }\r\n\r\n  renderBackground() {\r\n    return (\r\n      <circle\r\n        id=\"CircleBackground\"\r\n        cx={CENTER_X}\r\n        cy={CENTER_Y}\r\n        r={RADIUS}\r\n        strokeWidth={CIRCLE_STROKE_WIDTH * 3}\r\n        stroke=\"none\"\r\n        fill=\"#586369\"\r\n      ></circle>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <svg height={SVG_HEIGHT} width={SVG_WIDTH} id=\"SVG_BOX\">\r\n        {this.renderBackground()}\r\n        {this.renderSliderArea()}\r\n        {this.renderSliderPrompt()}\r\n        {this.renderSlider()}\r\n        <TargetTemperatureView\r\n          targetTemp={this.state.targetTemperature}\r\n        ></TargetTemperatureView>\r\n\r\n        <CurrentTemperatureView\r\n          currentTemp={this.state.currentTemperature}\r\n        ></CurrentTemperatureView>\r\n\r\n        <ModeView color={this.state.modeColor}></ModeView>\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RadialSliderView;\r\n","export function getModeColor(targetTemperature, currentTemperature, currentModeColor) {\r\n\r\n    console.log(\"computing mode\");\r\n\r\n    const dt = 2;\r\n    const dtHeat = 1;\r\n    const dtCool = 1.5;\r\n\r\n    let modeColor = \"\";\r\n\r\n    console.log(modeColor);\r\n    let UpperBoundTemp =\r\n        targetTemperature + dt + dtCool;\r\n    let LowerBoundTemp =\r\n        targetTemperature - dt - dtHeat;\r\n    let OffUpperBound =\r\n        targetTemperature + (dt - dtCool);\r\n    let OffLowerBound =\r\n        targetTemperature - (dt - dtHeat);\r\n\r\n    if (currentTemperature > UpperBoundTemp) {\r\n        modeColor = \"#3495E4\";\r\n    } else if (currentTemperature < LowerBoundTemp) {\r\n\r\n        modeColor = \"#E4656E\";\r\n\r\n    } else if (\r\n        currentTemperature < OffUpperBound &&\r\n        currentTemperature > OffLowerBound\r\n    ) {\r\n        modeColor = \"#D6D6D6\";\r\n    } else {\r\n        console.log(\"no category\")\r\n        modeColor = currentModeColor;\r\n    }\r\n\r\n    console.log(modeColor);\r\n    return modeColor;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport RadialSliderView from \"./RadialSliderView\";\r\nconst WHEEL_SCROLL_VALUE = 10;\r\n\r\nclass CurrentTempControl extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentTemp: 72,\r\n      temporaryCurrentTemperature: 72,\r\n      sliderXPos: 123\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        <RadialSliderView\r\n          currentTemp={this.state.currentTemp}\r\n        ></RadialSliderView>\r\n        <h2>Update Current Temperature</h2>\r\n        <div>\r\n          <strong>32&deg;F</strong>\r\n          <svg width=\"250\" height=\"50\">\r\n            {this.renderSliderLine()}\r\n            {this.renderSliderButton()}\r\n          </svg>\r\n          <strong>100&deg;F</strong>\r\n        </div>\r\n\r\n        {this.renderControls()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n// Event handling implemented with reference to https://github.com/dmitrymorozoff/react-circle-slider\r\n\r\n  handleWheel = event => {\r\n\r\n    var newPos = this.state.sliderXPos;\r\n    if (event.deltaY < 0) {\r\n\r\n      if (newPos <= 230) {\r\n        this.setState({\r\n          sliderXPos: newPos + WHEEL_SCROLL_VALUE\r\n        });\r\n      }\r\n    } else if (event.deltaY > 0) {\r\n\r\n      if (newPos >= 20) {\r\n        this.setState({\r\n          sliderXPos: newPos - WHEEL_SCROLL_VALUE\r\n        });\r\n      }\r\n    }\r\n\r\n    this.updateTemp();\r\n  };\r\n\r\n  handleMouseDown = event => {\r\n    event.preventDefault();\r\n    window.addEventListener(\"mousemove\", this.handleMouseMove);\r\n    window.addEventListener(\"mouseup\", this.handleMouseUp);\r\n    this.setState({\r\n      isMouseDown: true\r\n    });\r\n  };\r\n\r\n  handleMouseMove = event => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      isMouseMove: true\r\n    });\r\n\r\n    let newPos = event.offsetX;\r\n\r\n    if (newPos >= 10 && newPos <= 240) {\r\n      this.updateTemp();\r\n      this.setState({\r\n        sliderXPos: newPos\r\n      });\r\n    } else {\r\n      window.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n    }\r\n  };\r\n\r\n  updateTemp() {\r\n    let newTemp = 0;\r\n\r\n    let x = this.state.sliderXPos;\r\n\r\n    newTemp = (x / 220) * 68;\r\n    newTemp = Math.round(newTemp) + 28;\r\n\r\n    if (newTemp < 32) {\r\n      newTemp = 32;\r\n      // send();\r\n    } else if (newTemp > 100) {\r\n      newTemp = 100;\r\n    }\r\n\r\n    this.setState({\r\n      temporaryCurrentTemperature: newTemp\r\n    });\r\n  }\r\n\r\n  handleMouseUp = event => {\r\n    event.preventDefault();\r\n\r\n    this.setState({\r\n      isMouseMove: false,\r\n      isMouseDown: false\r\n    });\r\n    window.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n    window.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n  };\r\n\r\n  handleChange = event => {\r\n    let newCurrentTemp = event.target.value;\r\n    this.setState({ temporaryCurrentTemperature: newCurrentTemp });\r\n  };\r\n\r\n  updateCurrentTemp = event => {\r\n    event.preventDefault();\r\n    let newCurrentTemp = this.state.temporaryCurrentTemperature;\r\n\r\n    if (newCurrentTemp >= 32 && newCurrentTemp <= 100) {\r\n      this.setState({ currentTemp: this.state.temporaryCurrentTemperature });\r\n      this.setState({ currentTemp: this.state.temporaryCurrentTemperature });\r\n    } else {\r\n      window.alert(\"Current temperature must be >= 32 AND <=100\");\r\n    }\r\n  };\r\n\r\n  renderControls() {\r\n    return (\r\n      <form\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleChange}\r\n          value={this.state.temporaryCurrentTemperature}\r\n        ></input>\r\n        <br></br>\r\n        <button onClick={this.updateCurrentTemp}>Update</button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  renderSliderButton() {\r\n    return (\r\n      <svg>\r\n        <circle\r\n          id=\"SliderArea\"\r\n          cx={this.state.sliderXPos}\r\n          cy={25}\r\n          r={8}\r\n          strokeWidth={1}\r\n          stroke=\"#1a1a1a\"\r\n          fill=\"#D6D6D6\"\r\n          onMouseDown={this.handleMouseDown}\r\n          onMouseUp={this.handleMouseUp}\r\n        ></circle>\r\n      </svg>\r\n    );\r\n  }\r\n\r\n  renderSliderLine() {\r\n    return (\r\n      <svg>\r\n        <line\r\n          stroke=\"#ffffff\"\r\n          strokeWidth=\"50\"\r\n          fill=\"black\"\r\n          x1=\"0\"\r\n          x2=\"500\"\r\n          y1=\"25\"\r\n          y2=\"25\"\r\n          onWheel={this.handleWheel}\r\n        ></line>\r\n        <line\r\n          stroke=\"#bbbbbb\"\r\n          strokeWidth=\"1\"\r\n          x1=\"0\"\r\n          x2=\"500\"\r\n          y1=\"25\"\r\n          y2=\"25\"\r\n          onWheel={this.handleWheel}\r\n        ></line>\r\n      </svg>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default CurrentTempControl;\r\n","import React, { Component } from \"react\";\r\nimport CurrentTempControl from \"./components/controls/CurrentTempControlView\";\r\n\r\n\r\nclass MainViewPanel extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\"\r\n        }}\r\n      >\r\n        <CurrentTempControl></CurrentTempControl>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainViewPanel;\r\n","import React from 'react';\nimport './App.css';\nimport MainViewPanel from './view/MainViewPanel';\n// import { Machine } from 'xstate';\n// import { useMachine } from '@xstate/react/';\n// import MachineConfig from './MachineConfig';\n\n\n\n\nfunction App() {\n  return (\n    <div>\n      <MainViewPanel></MainViewPanel>\n    </div>\n\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}